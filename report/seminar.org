#+TITLE: XMPP
#+AUTHOR: Nikola Brković
#+OPTIONS: toc:nil
#+header: :exports results
#+LANGUAGE: sl
#+LATEX_HEADER: \usepackage[]{babel}
#+LATEX_HEADER: \usepackage{float}
#+bibliography: seminar.bib

* Namen protokola

XMPP je protokol, namenjen izmenjavi strukturiranih podatkov v
približno realnem času med dvema ali več entitetami
[cite:@rfc6120]. Kratica XMPP pomeni /Extensible Messaging and
Presence Protocol/, oziroma v slovenščini - razširljiv protokol za
sporočanje in prisotnost.

Čeprav je v teoriji XMPP splošno-namenski protokol za izmenjevanje
sporočil, v praksi se pa največkrat uporablja za hipno sporočanje
(/ang./ /instant messaging/ oziroma /IM/) in aplikacije, ki ponujajo
funkcionalnost klepetanja.

* Arhitektura protokola

Pri arhitekturi protokola so se ustvarjalci protokola XMPP zgledovali
po protokolu SMTP. Udeleženci v protokolu XMPP so povezani v
porazdeljenem omrežju. Vsak udeleženec je bodisi strežnik bodisi
klient. Poznamo tudi entitete, ki jim pravimo viri, ki pripadajo
določenemu uporabniku. Komunikacija lahko poteka ali med strežniki ali
med strežniki in klienti. En klient je lahko povezan na samo en
strežnik in z drugimi klienti lahko komunicira le posredno prek (enega
ali več) strežnikov.

Vsaka entiteta ima svoj unikatni identifikator oziroma naslov,
kateremu pravimo /Jabber ID/ oziroma /JID/.

Za strežnike velja, da je njihov JID enak njihovi domeni
(npr. ~jabber.si~).  JID-ji uporabnikov so oblike
~<uporabnik>@<strežnik>~ (npr. ~julija@jabber.si~), pri čemer je
strežnik tisti strežnik, na katerem je račun uporabnika
prijavljen. Unikatne naprave ali viri, ki so vezane na določenega
uporabnika imajo JID oblike ~<uporabnik>@<strežnik>/<vir>~
(npr. ~julija@jabber.si/prenosnik~).

* Scenarij komunikacije

Ko govorimo o komunikaciji med uporabniki, lahko govorimo o
komunikaciji med uporabniki, prijavljenimi na istem strežniku, kot je
prikazano na Sliki [[fig:local_server]], ali med uporabniki, prijavljenimi
na različnih strežnikih, kot je prikazano na Sliki [[fig:cross_server]].

#+name: fig:local_server
#+begin_src mermaid :file images/local-server.png
graph TD
 D[fa:fa-server jabber.si]

 D <--> A("fa:fa-user france#64;jabber.si")
 D <--> B("fa:fa-user julija#64;jabber.si")
#+end_src

#+caption: Komunikacija med uporabniki na istem strežniku
#+label: fig:local_server
#+ATTR_LATEX: :placement [H]
#+results: fig:local_server

#+name: fig:cross_server
#+begin_src mermaid :file images/cross-server.png
graph LR
 D[fa:fa-server jabber.si]
 A("fa:fa-user france#64;jabber.si")

 E[fa:fa-server xmpp.im.si]
 B("fa:fa-user julija#64;xmpp.im.si")

 A <--> D
 E <--> B

 D <--> E
#+end_src

#+caption: Komunikacija med uporabniki na različnih strežnikih
#+label: fig:cross_server
#+ATTR_LATEX: :placement [H]
#+results: fig:cross_server

* Opis specifikacije

Protokol XMPP je opisan v več ločenih RFC-jih:

- [[https://datatracker.ietf.org/doc/rfc6120/][Extensible Messaging and Presence Protocol (XMPP): Core]] (v
  nadaljevanju: /XMPP-CORE/)
- [[https://datatracker.ietf.org/doc/rfc6121/][Extensible Messaging
  and Presence Protocol (XMPP): Instant Messaging and Presence]] (v
  nadaljevanju: /XMPP-IM/)
- [[https://datatracker.ietf.org/doc/rfc7622/][Extensible Messaging and Presence Protocol (XMPP): Address Format]] (v
  nadaljevanju: /XMPP-ADDR/)

Specifikacija XMPP-CORE predstavlja minimalno potrebno funkcionalnost
za strežnik oziroma klient, ki implementira XMPP. Poleg teh treh
RFC-jev je velik del funkcionalnosti XMPP v razširitvah, ki jim
pravimo /XEP/-ji (/XMPP Extension Protocols/). Implementacije
protokola XMPP (strežniki, klienti) implementirajo le določene XEP-je
in svoje zmožnosti oglašujejo drugim entitetam.
  
** XMPP-CORE

V tem RFC-ju je definirano:

- vzpostavljanje in rušenje povezave med udeleženci v protokolu,
- tri osnovne vrste sporočil: ~<message/>~, ~<presence/>~ in ~<iq/>~
  (definirane so le vrste sporočil, struktura sporočil je pa opisana v
  XMPP-IM)
- vrste napak,
- ter atribute sporočil. Najbolj pomembni atributi so ~from~, ~to~ in
  ~id~, ki identificirata pošiljatelja sporočila, prejemnika sporočila
  ter unikatni identifikator toka.

Dve entiteti, ki želita komunicirati po protokolu XMPP morata
vzpostaviti trajno povezavo po protokolu TCP, kateri pravimo /tok XML/
(ang. /XML stream/). Tok je sestavljen iz posameznih sporočil, katerim
pravimo /stance XML/ (ang. /XML stanzas/). Tako posamezne stance kot
tudi celoten tok morajo predstavljati sintaksno veljavno besedilo
formata XML. Primer toka je prikazan v [[https://xmpp.org/rfcs/rfc6120.html#streams-fundamentals][specifikaciji XMPP-CORE, pod
razdelkom "4.1 Stream Fundamentals"]]. [cite:@rfc6120]

Pri vzpostavitvi toka se lahko udeleženca dogovorita za šifriranje
toka s protokolom TLS, ali zahtevata avtentikacijo po protokolu SASL,
vendar je ta funkcionalnost izven obsega tega poročila.

** XMPP-IM

Ta specifikacija predstavlja razširitev osnovne specifikacije, in
predpostavlja, da so entitete, udeležene v protokolu, že vzpostavile
povezavo po protokolu opisanem v XMPP-CORE.

XMPP-IM omogoča povezovanje z drugimi uporabniki oziroma kontakti. V
žargonu XMPP pravimo seznamu kontaktov /spisek/ (ang. /roster/). Vsak
uporabnik ima svoj lastni zasebni spisek. Spisek je shranjen na
strežniku, na katerega je uporabnik prijavljen. Vnose v spisek
dodajamo in odstranjujemo z uporabo sporočil vrste ~<iq/>~.

XMPP-IM omogoča tudi naročanje na prisotnost drugih uporabnikov
(ang. /presence subscription/). Recimo, da se je France naročil na
Julijino prisotnost. Če Julija strežniku sporoči, da se je njena
prisotnost spremenila, bo strežnik Franceta obvestil o Julijini novi
prisotnosti. Ta obvestila se prenešajo tudi med različnimi strežniki.

Definiran je tudi koncept klepetalnih sej (ang. /Chat Session/). Med
dvema entitetoma obstaja lahko ena seja, vrste ~chat~. Omogočeni so
pa tudi skupinski klepeti - seja vrste ~groupchat~. Informacija o
klepetalni seji je del metapodatkov sporočila vrste
~<message/>~. [cite:@rfc6121]

** XMPP-ADDR

Specifikacija XMPP-ADDR določa, kako so črke izven kodirne tabele
ASCII predstavljene v naslovih strežnikov oziroma uporabnikov. Vse
črke, ki niso del ASCII-ja, morajo biti del Unicodea. [cite:@rfc7622]

** Razširitve

Spodaj je seznam najbolj pogostih razširitev, ki so opisane v XEP-jih.

- [[https://xmpp.org/extensions/xep-0045.html][Multi-User Chat (XEP-0045)]] - podrobneje določa delovanje skupinskih
  klepetov, ki so omenjeni že v XMPP-IM [cite:@saint-andre2002muc],
- [[https://xmpp.org/extensions/xep-0166.html][Jingle (XEP-0166)]] - omogoča dogovarjanje med entitetami preko XMPP
  za neposredne medijske seje, ki potekajo po nekem drugem
  kanalu. Uporablja se predvsem za glasovne ali video
  klepete. [cite:@ludwig2005jingle]
- [[https://xmpp.org/extensions/xep-0234.html][Jingle File Transfer (XEP-0234)]] - določa format seje Jingle za
  prenos datotek [cite:@saint-andre2008jingle-ft]

* Format sporočil

Vsa sporočila v protokolu XMPP so predstavljena v formatu
XML. Format osnovnih vrst sporočil oziroma stanc je opisan spodaj.

** Message

Stanca te vrste je sestavljena iz XML elementa ~<message/>~. XML
element lahko vsebuje atribute - predvsem atribute ~from~, ~to~ in
~type~. Pomeni teh atributov so bili razloženi že v prejšnjih
razdelkih.

Telo elementa ~<message/>~ vsebuje element ~<body/>~, ki vsebuje
dejansko vsebino sporočila. Vsebuje lahko tudi element ~<subject/>~, ki
vsebuje zadevo sporočila.

** Presence

Stanca te vrste je sestavljena iz XML elementa ~<presence/>~. V
primeru, ko se uporabnik prvič poveže na strežnik je lahko stanca celo
prazen XML element. Ponavadi pa vsebuje atributa ~to~ pa ~from~. Telo
stance lahko vsebuje elementa ~<show/>~ ali ~<status/>~, ki bolj
podrobno opisujeta prisotnost oziroma stanje uporabnika.

** IQ (Info/Query)

Te stance so namenjene poizvedbam in shranjevanju podatkov na
drugih entitetah.

Stanca te vrste je sestavljeno iz XML elementa ~<iq/>~. Element mora
vsebovati atribut ~id~, ki določa identifikator podatkov, in atribut
~type~, ki določa vrsto zahteve. Poznamo vrste ~get~, ~set~, ~result~
in ~error~. Ko sprožimo zahtevo, izberemo vrsto ~get~ ali ~set~, druga
entiteta pa odgovori z ~result~, v primeru, da je zahteva bila
uspešna, ~error~ pa v primeru, da je zahteva bila neuspešna. Telo
elementa vsebuje vrednosti podatkov.

* Literatura

#+print_bibliography: 
